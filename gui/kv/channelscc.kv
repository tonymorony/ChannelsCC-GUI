#:import ListAdapter kivy.adapters.listadapter.ListAdapter
#:import App kivy.app
#:import ScreenManagement gui.screens.screenmanagement
#:import UserPage gui.screens.userpage
#:import LoginPage gui.screens.loginpage
#:import PaymentPage gui.screens.paymentpage
#:import ChannelCreateScreen gui.screens.channelcreation
#:import ChannelListItemButton gui.buttons.channelbutton
#:import CreateChannelButton gui.buttons.createchannel
#:import RefreshChannelsListButton gui.buttons.refreshlist
#:import PaymentButton gui.buttons.paymentbutton
#:import SendPaymentButton gui.buttons.sendpaymentbutton
#:import ChannelsLibrary lib.channelslib
#:import PaymentSlider gui.sliders.paymentslider
#:import getbalance lib.rpclib
#:import channels_info lib.rpclib

ScreenManagement:
    id: screenmanager
    LoginPage:
        id: loginpage
    UserPage:
        id: userpage
    ChannelCreationPage:
        id: channelcreation
    PaymentPage:
        id: paymentpage

<LoginPage>:
    name: "login_page"
    BoxLayout:
        orientation: 'vertical'
        Image:
            source: 'gui/img/logo.png'
            size_hint: 1, 0.3
        GridLayout:
            rows: 5
            Label:
                text: "RPC Server:"
            TextInput:
                id: rpcserver
                text: ChannelsLibrary.ConfigReader().rpc_server
            Label:
                text: "RPC User:"
            TextInput:
                id: rpcuser
                text: ChannelsLibrary.ConfigReader().rpc_user
            Label:
                text: "RPC Password:"
            TextInput:
                id: rpcpassword
                text: ChannelsLibrary.ConfigReader().rpc_password
            Label:
                text: "RPC Port:"
            TextInput:
                id: port
                text: ChannelsLibrary.ConfigReader().rpc_port
            Label:
                text: "Save login details?"
            CheckBox:
                id: savelogin
                active: True
        Button:
            text: "Try to connect"
            size_hint: 1, 0.2
            on_release: root.verify_credentials()


<UserPage>:
    name: "user"
    on_enter: channelslist.adapter.data = ChannelsLibrary.get_channels_list(app.rpc_connection)
    on_enter: balance.text = ChannelsLibrary.get_balance(app.rpc_connection)
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            orientation: 'horizontal'
            size_hint: 1, 0.1
            Label:
                text: "Balance:"
            Label:
                id: balance
                text: ChannelsLibrary.get_balance(app.rpc_connection)
            Button:
                text: "Refresh balance"
                size_hint: 0.3, 1
                on_release: balance.text = ChannelsLibrary.get_balance(app.rpc_connection)
        GridLayout:
            rows: 1
            size_hint: 1, 0.1
            Label:
                text: "Channels list:"
            Label:
                text: "Channel info:"
        BoxLayout:
            id: mainbox
            orientation: 'horizontal'
            ScrollView:
                id: channelsscroll
                ListView:
                    size_hint: 1, 1
                    name: 'channelslist'
                    id: channelslist
                    adapter: ListAdapter(data = ChannelsLibrary.get_channels_list(app.rpc_connection), cls = 'ChannelListItemButton')
            ScrollView:
                Label:
                    id: channelinformation
                    text: "<----- Follow the White Rabbit"
                    text_size: self.width, None
                    size_hint_y: None
                    height: self.texture_size[1]
                    halign: 'left'
                    valign: 'top'
        GridLayout:
            size_hint: 1, 0.25
            rows: 2
            RefreshChannelsListButton:
                id: refreshchlist
                text: "Refresh channels list"
                size_hint: 1, 0.15
                on_release: channelslist.adapter.data = ChannelsLibrary.get_channels_list(app.rpc_connection)
            CreateChannelButton:
                id: createchannel
                text: "Open new channel"
                size_hint: 1, 0.15
                on_release: root.manager.current = "channelcreation"
            Button:
                id: changerpc
                text: "Change RPC connection credentials"
                size_hint: 1, 0.15
                on_release: root.manager.current = "login_page"
            PaymentButton:
                id: paymentbutton
                text: "Make a payment"
                size_hint: 1, 0.15


<ChannelCreationPage>:
    name: "channelcreation"
    BoxLayout:
        orientation: "vertical"
        Label:
            id: creationstatus
            text: "Input your channel details"
            size_hint: 1, 0.2
            text_size: self.size
            markup: True
            valign: "center"
            halign: "center"
        GridLayout:
            rows: 3
            size_hint: 1, 0.5
            Label:
                text: "Destination pubkey:"
                size: self.texture_size
                text_size: self.size
                valign: 'middle'
                halign: 'center'
            TextInput:
                id: destpubkey
            Label:
                text: "Number of payments:"
                size: self.texture_size
                text_size: self.size
                valign: 'middle'
                halign: 'center'
            TextInput:
                id: numpayments
            Label:
                text: "Denomnination (in satoshis):"
                size: self.texture_size
                text_size: self.size
                valign: 'middle'
                halign: 'center'
            TextInput:
                id: denomination
        BoxLayout:
            orientation: 'horizontal'
            size_hint: 1, 0.1
            Button:
                id: createchanelinit
                text: "Open channel"
                size_hint: 0.5, 1
                on_release: root.create_channel()
            Button:
                id: back
                text: "Back"
                size_hint: 0.5, 1
                on_release: root.manager.current = "user"


<PaymentPage>:
    name: "paymentpage"
    on_enter: PaymentSlider.PaymentSlider.set_slider_values(self.ids.paymentslider)
    on_enter: paymentamount.text = "0"
    on_enter: paymentstatus.text = "Payment status"
    on_enter: channelinfotext.text = ChannelsLibrary.get_channel_info(app.rpc_connection, app.active_channel_id)
    on_enter: payments_left.text = str(ChannelsLibrary.get_channel_additional_info(app.rpc_connection, app.active_channel_id)["payments_left"])
    on_enter: denomination.text = str(ChannelsLibrary.get_channel_additional_info(app.rpc_connection, app.active_channel_id)["denomaination"])
    on_enter: capacity.text = str(ChannelsLibrary.get_channel_additional_info(app.rpc_connection, app.active_channel_id)["capacity_left"])
    BoxLayout:
        orientation: "vertical"
        Label:
            id: channelinfotext
            text: ""
            size: self.texture_size
            text_size: self.size
        GridLayout:
            rows: 3
            Label:
                text: "Payments left: "
            Label:
                id: payments_left
                text: "0"
            Label:
                text: "Denomination: "
            Label:
                id: denomination
                text: "0"
            Label:
                text: "Capacity left: "
            Label:
                id: capacity
                text: "0"
        Label:
            text: "Choose payment sum in satoshis:"
        PaymentSlider:
            id: paymentslider
            max: 10
            step: 1
            on_touch_move: paymentamount.text = str(self.value)
        TextInput:
            id: paymentamount
            text: "0"
        Label:
            id: paymentstatus
            text: "Payment status"
        BoxLayout:
            orientation: "horizontal"
            SendPaymentButton:
                id: sendpayment
                text: "Send payment"
                on_release: self.send_payment()
                size_hint: 0.5, 1
            Button:
                id: back
                text: "Back"
                size_hint: 0.5, 1
                on_release: root.manager.current = "user"

